// <auto-generated />
using System;
using Insurance_agency.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Insurance_agency.Migrations
{
    [DbContext(typeof(InsuranceContext))]
    partial class InsuranceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblActivityLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("action");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<string>("Detail")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("detail")
                        .IsFixedLength();

                    b.Property<int?>("TargetId")
                        .HasColumnType("int")
                        .HasColumnName("target_id");

                    b.Property<string>("TargetTable")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("target_table")
                        .IsFixedLength();

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("PK_ActivityLog");

                    b.ToTable("tbl_ActivityLog", (string)null);
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblContract", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<int?>("PolicyId")
                        .HasColumnType("int")
                        .HasColumnName("policy_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<long?>("TotalPaid")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Contract");

                    b.HasIndex("PolicyId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_Contract", (string)null);
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblContractStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_ContractStatus");

                    b.ToTable("tbl_ContractStatus", (string)null);
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblInsuranceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("active");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("PK_InsuranceType");

                    b.ToTable("tbl_InsuranceType", (string)null);
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblLoan", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int")
                        .HasColumnName("contract_id");

                    b.Property<long?>("LoanAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("loan_amount");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime")
                        .HasColumnName("request_date");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_Loan");

                    b.HasIndex("ContractId");

                    b.ToTable("tbl_Loan", (string)null);
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblNotification", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Detail")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("detail")
                        .IsFixedLength();

                    b.Property<int?>("IsRead")
                        .HasColumnType("int")
                        .HasColumnName("is_read");

                    b.Property<int?>("NotificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("notification_type_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Notification");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_Notification", (string)null);
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblNotificationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_NotificationType");

                    b.ToTable("tbl_NotificationType", (string)null);
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblPaymentHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<long?>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int")
                        .HasColumnName("contract_id");

                    b.Property<DateTime?>("PaymentDay")
                        .HasColumnType("datetime")
                        .HasColumnName("payment_day");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_PaymentHistory");

                    b.HasIndex("ContractId");

                    b.ToTable("tbl_PaymentHistory", (string)null);
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblPolicy", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("active");

                    b.Property<int?>("InsuranceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("insurance_type_id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<long?>("SumAssured")
                        .HasColumnType("bigint")
                        .HasColumnName("sum_assured");

                    b.Property<int?>("TermMax")
                        .HasColumnType("int")
                        .HasColumnName("term_max");

                    b.Property<int?>("TermMin")
                        .HasColumnType("int")
                        .HasColumnName("term_min");

                    b.HasKey("Id")
                        .HasName("PK_Policy");

                    b.HasIndex("InsuranceTypeId");

                    b.ToTable("tbl_Policy", (string)null);
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblPolicyBenifit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("active");

                    b.Property<long?>("BenifitAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("benifit_amount");

                    b.Property<string>("Detail")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("detail");

                    b.Property<int?>("PolicyId")
                        .HasColumnType("int")
                        .HasColumnName("policy_id");

                    b.HasKey("Id")
                        .HasName("PK_PolicyBenifit");

                    b.HasIndex("PolicyId");

                    b.ToTable("tbl_PolicyBenifit", (string)null);
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("Active")
                        .HasColumnType("int")
                        .HasColumnName("active");

                    b.Property<int?>("AuthId")
                        .HasColumnType("int")
                        .HasColumnName("auth_id");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.ToTable("tbl_User", (string)null);
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblContract", b =>
                {
                    b.HasOne("Insurance_agency.Models.Entities.TblPolicy", "Policy")
                        .WithMany("TblContracts")
                        .HasForeignKey("PolicyId")
                        .HasConstraintName("FK_Contract_Policy");

                    b.HasOne("Insurance_agency.Models.Entities.TblContractStatus", "StatusNavigation")
                        .WithMany("TblContracts")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_Contract_ContractStatus");

                    b.HasOne("Insurance_agency.Models.Entities.TblUser", "User")
                        .WithMany("TblContracts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Contract_User");

                    b.Navigation("Policy");

                    b.Navigation("StatusNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblLoan", b =>
                {
                    b.HasOne("Insurance_agency.Models.Entities.TblContract", "Contract")
                        .WithMany("TblLoans")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_Loan_Contract");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblNotification", b =>
                {
                    b.HasOne("Insurance_agency.Models.Entities.TblNotificationType", "NotificationType")
                        .WithMany("TblNotifications")
                        .HasForeignKey("NotificationTypeId")
                        .HasConstraintName("FK_Notification_NotificationType");

                    b.HasOne("Insurance_agency.Models.Entities.TblUser", "User")
                        .WithMany("TblNotifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblPaymentHistory", b =>
                {
                    b.HasOne("Insurance_agency.Models.Entities.TblContract", "Contract")
                        .WithMany("TblPaymentHistories")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_PaymentHistory_Contract");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblPolicy", b =>
                {
                    b.HasOne("Insurance_agency.Models.Entities.TblInsuranceType", "InsuranceType")
                        .WithMany("TblPolicies")
                        .HasForeignKey("InsuranceTypeId")
                        .HasConstraintName("FK_Policy_InsuranceType");

                    b.Navigation("InsuranceType");
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblPolicyBenifit", b =>
                {
                    b.HasOne("Insurance_agency.Models.Entities.TblPolicy", "Policy")
                        .WithMany("TblPolicyBenifits")
                        .HasForeignKey("PolicyId")
                        .HasConstraintName("FK_PolicyBenifit_Policy");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblContract", b =>
                {
                    b.Navigation("TblLoans");

                    b.Navigation("TblPaymentHistories");
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblContractStatus", b =>
                {
                    b.Navigation("TblContracts");
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblInsuranceType", b =>
                {
                    b.Navigation("TblPolicies");
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblNotificationType", b =>
                {
                    b.Navigation("TblNotifications");
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblPolicy", b =>
                {
                    b.Navigation("TblContracts");

                    b.Navigation("TblPolicyBenifits");
                });

            modelBuilder.Entity("Insurance_agency.Models.Entities.TblUser", b =>
                {
                    b.Navigation("TblContracts");

                    b.Navigation("TblNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
